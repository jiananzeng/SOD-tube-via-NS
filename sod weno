clc,clear;
%% spatial grid
Nx=1601;
T=0.2;
x=linspace(-0.5,0.5,Nx);
dx=x(2)-x(1);
dt=dx*0.1;
Nt=T/dt;

%%  
gamma=1.4;
U=zeros(3,Nx);
h=zeros(3,Nx-5);
%% initial condition for the SOD shock tube
x1=x<=0;
x2=x>0;
rho0 =   1*x1 + 0.125*x2;
u0   = 0.0*x1 +   0.0*x2;
p0   =   1*x1 +   0.1*x2;

E0=p0./(gamma-1)./rho0+0.5*u0.^2;
a0=sqrt(gamma*p0./rho0);

% physics to conservation
U(1,:) = rho0;
U(2,:) = rho0.*u0;
U(3,:) = p0/(gamma-1) + 0.5*rho0.*u0.^2;

U1=U;U2=U;

%% iteration

for t=1:Nt

    %% RK1
    % wall boundary condition ( maintain const )

    % space discreation
    % conservation to physics
    rho = U(1,:);
    u = U(2,:)./U(1,:);
    p = (gamma-1)*(U(3,:)-0.5*U(2,:).^2./U(1,:));
    E = p/(gamma-1)+0.5*rho.*u.^2;
    
    figure(1)
    p1=plot(x,rho,'b',x,u,'r',x,p,'black');
    set(p1,'linewidth', 3);
    grid on;
    legend('Density','Velocity','Pressure');
    title(['ENO + 3order RK scheme:  t = ' num2str(t*dt)]);
    pause(0.01);
    
    % characteristic value
    c=sqrt(gamma*p./rho);
    lambda=max(max(abs(u)+c));
    
    %fluxes
    F   = [rho.*u; rho.*u.^2+p; (E+p).*u];
    F_p = 0.5*(F+lambda*U);
    F_n = 0.5*(F-lambda*U);
    
    %fluxes difference
    for v=1:2
        if v==1
            F=F_p(:,1:end-1);
        else
            F=F_n(:,end:-1:2);
        end
        
        F1 = F(:,1:Nx-5);
        F2 = F(:,2:Nx-4);
        F3 = F(:,3:Nx-3);
        F4 = F(:,4:Nx-2);
        F5 = F(:,5:Nx-1);
        
        h0 =  1/3*F1 - 7/6*F2 + 11/6*F3;
        h1 = -1/6*F2 + 5/6*F3 +  1/3*F4;
        h2 =  1/3*F3 + 5/6*F4 -  1/6*F5;
        
        %calculate the value of smooth detection
        IS0 = 13/12*(F1-2*F2+F3).^2 + 1/4*(F1-4*F2+3*F3).^2;
        IS1 = 13/12*(F2-2*F3+F4).^2 + 1/4*(F2-F4).^2;
        IS2 = 13/12*(F3-2*F4+F5).^2 + 1/4*(3*F3-4*F4+F5).^2;
        
        for i = 1:size(F1,2)
            for n = 1:3
                if IS0(n,i)<=IS1(n,i) && IS0(n,i)<=IS2(n,i)
                    h(n,i)=h0(n,i);
                elseif IS1(n,i)<=IS0(n,i) && IS1(n,i)<=IS2(n,i)
                    h(n,i)=h1(n,i);
                elseif IS2(n,i)<=IS0(n,i) && IS2(n,i)<=IS1(n,i)
                    h(n,i)=h2(n,i);
                end
            end
        end
        
        if v==1  %positive
            dF_p = (h(:,2:end) - h(:,1:end-1))/dx;
        else  % negative
            dF_n = -(h(:,end:-1:2) - h(:,end-1:-1:1))/dx;
        end
    end
    
    dF   = dF_p + dF_n;
    
    U1(:,4:Nx-3) = U(:,4:Nx-3) - dt*dF;
    
    %% RK2
    % wall boundary condition ( maintain const )
    
    rho=U1(1,:);
    u=U1(2,:)./U1(1,:);
    p=(gamma-1)*(U1(3,:)-0.5*U1(2,:).^2./U1(1,:));
    E=p/(gamma-1) + 0.5*rho.*u.^2;
    
    % characteristic value
    c=sqrt(gamma*p./rho);
    lambda=max(max(abs(u)+c));
    
    %fluxes
    F   = [rho.*u; rho.*u.^2+p; (E+p).*u];
    F_p = 0.5*(F+lambda*U1);
    F_n = 0.5*(F-lambda*U1);
    
    for v=1:2
        if v==1
            F=F_p(:,1:end-1);
        else
            F=F_n(:,end:-1:2);
        end
        
        F1 = F(:,1:Nx-5);
        F2 = F(:,2:Nx-4);
        F3 = F(:,3:Nx-3);
        F4 = F(:,4:Nx-2);
        F5 = F(:,5:Nx-1);
        
        h0 =  1/3*F1 - 7/6*F2 + 11/6*F3;
        h1 = -1/6*F2 + 5/6*F3 +  1/3*F4;
        h2 =  1/3*F3 + 5/6*F4 -  1/6*F5;
        
        %calculate the value of smooth detection
        IS0 = 13/12*(F1-2*F2+F3).^2 + 1/4*(F1-4*F2+3*F3).^2;
        IS1 = 13/12*(F2-2*F3+F4).^2 + 1/4*(F2-F4).^2;
        IS2 = 13/12*(F3-2*F4+F5).^2 + 1/4*(3*F3-4*F4+F5).^2;
        
        for i = 1:size(F1,2)
            for n = 1:3
                if IS0(n,i)<=IS1(n,i) && IS0(n,i)<=IS2(n,i)
                    h(n,i)=h0(n,i);
                elseif IS1(n,i)<=IS0(n,i) && IS1(n,i)<=IS2(n,i)
                    h(n,i)=h1(n,i);
                elseif IS2(n,i)<=IS0(n,i) && IS2(n,i)<=IS1(n,i)
                    h(n,i)=h2(n,i);
                end
            end
        end
        
        if v==1  %positive
            dF_p = (h(:,2:end) - h(:,1:end-1))/dx;
        else  % negative
            dF_n = -(h(:,end:-1:2) - h(:,end-1:-1:1))/dx;
        end
    end
    
    dF = dF_p + dF_n;
    
    U2(:,4:Nx-3) = 0.75*U(:,4:Nx-3) + 0.25*U1(:,4:Nx-3) - 0.25*dt*dF;
    
    
    %% RK3
    % wall boundary condition ( maintain const )
    
    rho=U2(1,:);
    u=U2(2,:)./U2(1,:);
    p=(gamma-1)*(U2(3,:)-0.5*U2(2,:).^2./U2(1,:));
    E=p/(gamma-1)+0.5*rho.*u.^2;
    
    % characteristic value
    c=sqrt(gamma*p./rho);
    lambda=max(max(abs(u)+c));
    
    %fluxes
    F   = [rho.*u; rho.*u.^2+p; (E+p).*u];
    F_p = 0.5*(F+lambda*U2);
    F_n = 0.5*(F-lambda*U2);
    
    for v=1:2
        if v==1
            F=F_p(:,1:end-1);
        else
            F=F_n(:,end:-1:2);
        end
        
        F1 = F(:,1:Nx-5);
        F2 = F(:,2:Nx-4);
        F3 = F(:,3:Nx-3);
        F4 = F(:,4:Nx-2);
        F5 = F(:,5:Nx-1);
        
        h0 =  1/3*F1 - 7/6*F2 + 11/6*F3;
        h1 = -1/6*F2 + 5/6*F3 +  1/3*F4;
        h2 =  1/3*F3 + 5/6*F4 -  1/6*F5;
        
        %calculate the value of smooth detection
        IS0 = 13/12*(F1-2*F2+F3).^2 + 1/4*(F1-4*F2+3*F3).^2;
        IS1 = 13/12*(F2-2*F3+F4).^2 + 1/4*(F2-F4).^2;
        IS2 = 13/12*(F3-2*F4+F5).^2 + 1/4*(3*F3-4*F4+F5).^2;
        
        for i = 1:size(F1,2)
            for n = 1:3
                if IS0(n,i)<=IS1(n,i) && IS0(n,i)<=IS2(n,i)
                    h(n,i)=h0(n,i);
                elseif IS1(n,i)<=IS0(n,i) && IS1(n,i)<=IS2(n,i)
                    h(n,i)=h1(n,i);
                elseif IS2(n,i)<=IS0(n,i) && IS2(n,i)<=IS1(n,i)
                    h(n,i)=h2(n,i);
                end
            end
        end
        
        if v==1  % positive
            dF_p = (h(:,2:end) - h(:,1:end-1))/dx;
        else     % negative
            dF_n = -(h(:,end:-1:2) - h(:,end-1:-1:1))/dx;
        end
    end
    
    dF = dF_p + dF_n;
    
    U(:,4:Nx-3) = 1/3*U(:,4:Nx-3) + 2/3*U2(:,4:Nx-3) - 2/3*dt*dF;    

end
